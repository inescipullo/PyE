0.15 * 19.71
install.packages("dslabs")
install.packages("dslabs")
library("dslabs")
install.packages()
install.packages("tidyverse")
murders %>%
ggplot(des(population, total, label = abb, color = region)) +
geom_label()
murders %>%
ggplot(aes(population, total, label = abb, color = region)) +
geom_label()
library(dslabs)
murders %>%
ggplot(aes(population, total, label = abb, color = region)) +
geom_label()
a<-1
b<-1
c<--1
c
ls()
ls
log(8)
log(a)
log
log(exp(2))
log(8, 2)
log(8, base=2)
log(8)
help(log)
help("log")
data()
co2
trump_tweets
pi
e
inf
Inf
solution2 <- (-b - sqrt(b^2-4*a*c))/2*a
solution1
a
a<-1
b<-1
c<--1
solution1 <- (-b + sqrt(b^2-4*a*c))/2*a
solution2 <- (-b - sqrt(b^2-4*a*c))/2*a
solution1
solution2
library(dslabs)
data("murders")
class(murders)
str(murders)
names(murders)
head(murders)
murders$population
pop <- murders$population
length(pop)
z <- "r"
z
z <- "represent"
z
class(z)
z <- 3 == 2
z
z <- 2==2
z
seq(1,5)
s <- seq(1,5)
s
class(s)
s[2]
# Code to computeolution to quadratic ecuation ax^2+bx+c
# Define variables
a<-2
b<--1
c<--4
# Compute solution
solution1 <- (-b + sqrt(b^2 - 4*a*c))/(2*a)
solution2 <- (-b - sqrt(b^2 - 4*a*c))/(2*a)
solution1
solution2
log4(1024)
help(log)
log(1024, base=4)
library(dslibs)
library(dslabs)
data("movielens")
str(movielens)
class(movielens$title)
z
z <- "represent"
class(z)
class(movielens$genres)
nlevels(movielens$genres)
class(movielens$userId)
sum(movielens$userId)
x <- c(1, "canada", 3)
x
x[2]
x[3]
x <- c("1", "b", "3")
x
as.numeric(x)
y <- 2==3
t
y
as.numeric(y)
y
as.character(y)
x
x[2] <-"4"
x
x <- as.numeric(x)
x
rank(x)
x[1] <- 2
x
x[1] <- 3
x
rank(x)
name <- c("Mandi", "Amy", "Nicole", "Olivia")
distance <- c(0.8, 3.1, 2.8, 4.0)
time <- c(10, 30, 40, 50)
time <- time/60
time
speed <- distance/time
speed
murder_rate
library(dslabs)
data(murders)
murder_rate <- murders$population/murders$total*100000
index <- murder_rate <= 0.71
index
murder_rate
murder_rate <- murders$population/murders$total
murder_rate
str(murders)
murder_rate <- murders$total/murders$population*100000
murder_rate
index <- murder_rate <= 0.71
index
murders$state[index]
sum(index)
west <- murders$region == west
west <- murders$region == west
west <- murders$region == WEST
str(murders$region)
levels(murders$region)
west <- murders$region == West
west <- murders$region == "West"
west
safe <- murder_rate <=1
safe <- murder_rate <= 0.71
index
index <- west & safe
murders$state[index]
safe <- murder_rate <=1
index <- west & safe
murders$state[index]
index
library(dplyr)
library(dslabs)
data(heights)
options(digits = 3)
str(heights)
mean(heig)
library(dslabs)
data(heights)
options(digits = 3)
str(heights)
mean(heights$height)
avg_height <- mean(heights$height)
ind <- heights$height > avg_height
ind
sum(ind)
ind <- heights$height > avg_height & sex == "Female"
ind <- heights$height > avg_height & heights$sex == "Female"
ind
sum(ind)
ind <- heights$sex == "Female"
mean(ind)
min(heights$height)
which.min(heights$height)
heights$sex[1032]
max(heights$height)
50:82
x <- 50:82
x !%in% heights$height
x %in% heights$height
sum(!x %in% heights$height)
heights2 <- heights %>% mutate(ht_cm = height*2.54)
heights2
heights2$ht_cm[18]
mean(heights2$ht_cm)
females <- filter(heights2, sex == "Female")
females
mean(females$ht_cm)
library(dslabs)
data(olive)
head(olive)
plot(olive$palmitic, olive$palmitoleic)
hist(olive$eicosenoic)
boxplot(palmitic~region, olive)
iris
table(species)
table(Species)
frec_abs <- table(Species)
frec_abs <- table(iris.Species)
Species
iris
iris[Speciees]
iris[Species]
iris$Species
frec_abs <- table(iris$Species)
data(iris)
attach(iris)
frec_abs <- table(iris$Species)
frec_abs
// data(iris)
frec_rel <- frec_abs/150
frec_rel
porc <- frec_rel * 100
porc
n = length(iris$Species)
frec_abs <- table(iris$Species)
frec_rel <- frec_abs/150
porc <- frec_rel * 100
frec_rel <- frec_abs/n
porc <- frec_rel * 100
n
frec_abs
frec_rel
porc
pie(frec_abs)
install.packages("qcc")
library(qcc)
stem(Sepal.Length)
source('~/Documents2.0/Probabilidad y Estadistica/prueba.r')
install.packages("qcc")
source('~/Documents2.0/Probabilidad y Estadistica/prueba.r')
cara_dado <- c(1,2,3,4,5,6)
x <- seq(10,90,10)
lanzamientos <- c(10*x, 100*x, 1000*x)
frec1 <- vector(mode = "numeric", length(lanzamientos))
frec2 <- vector(mode = "numeric", length(lanzamientos))
frec3 <- vector(mode = "numeric", length(lanzamientos))
frec4 <- vector(mode = "numeric", length(lanzamientos))
frec5 <- vector(mode = "numeric", length(lanzamientos))
frec6 <- vector(mode = "numeric", length(lanzamientos))
puntos <- cbind(lanzamientos,frec1,frec2,frec3,frec4,frec5,frec6)
for (i in 1:length(lanzamientos))
puntos[i,2:7] <- table(sample(cara_dado, puntos[i,1], replace = T))
puntos
for (i in 1:length(lanzamientos))
puntos[i,2:7] <- puntos[i,2:7]/puntos[i,1]
puntos
par(mfrow=c(2,3))
for (i in 2:7) {
plot(puntos[,1],puntos[,i],xlab = "lanzamientos", ylab = "frecuencias relativas")
abline(0.1666666, 0)
}
cara <- c(0,1)
x <- seq(10,90,10)
lanzamientos <- c(x, 10*x, 100*x, 1000*x)
frec_relativa <- vector(mode="numeric", length(lanzamientos))
puntos <- cbind(lanzamientos, frec_relativa)
for (i in 1:length(lanzamientos))
puntos [i,2] <- (mean (sample(cara, puntos[i,1], replace=T)))
puntos
plot(puntos, ylab = "frecuencias relativas")
abline(0.5,0)
setwd("/Users/inescipullo/Documents2.0/Probabilidad\ y\ Estadistica/PyE")
data = read.table("usuarios9.csv", header = TRUE, sep = ",")
data2 = read.table("recorridos9.csv", header = TRUE, sep = ",")
attach(data)
attach(data2)
# tabla de frecuencias para GENERO
# es variable cualitativa
# grafico de torta
frec_abs_genero = table(data$genero_usuario)
frec_rel_genero = round(frec_abs_genero / sum(frec_abs_genero), 4)
tabla_genero = cbind(frec_abs_genero,frec_rel_genero)
attributes(tabla_genero)$dimnames[[2]] = c("Frecuencia Absoluta", "Frecuencia Relativa")
total = c(sum(frec_abs_genero),sum(frec_rel_genero))
tabla_genero = rbind(tabla_genero,total)
attributes(tabla_genero)$dimnames[[1]] = c("Femenino","Masculino","Otro","Total")
tabla_genero
#grafico de sectores para GENERO
x = table(data$genero_usuario)
title = "Género de los Usuarios \n del Sistema EcoBicis de CABA"
porcentaje = round(x / sum(x) * 100, 2)
options = c("Femenino", "Masculino", "Otro")
labels = paste(options, porcentaje, c("%"), sep = " ")
grafico_genero = pie(x, labels = labels, clockwise = TRUE, main = title, col = c("#ffff66","#99ff66","#ff6666"))
install.packages("qcc")
library(qcc)
# tabla de frecuencias DIRECCION ESTACION DE ORIGEN
fa_direc_or = table(data2$direccion_estacion_origen)
fr_direc_or = round(fa_direc_or/sum(fa_direc_or),4)
tabla_direc_or = cbind(fa_direc_or,fr_direc_or)
attributes(tabla_direc_or)$dimnames[[2]] = c("Frecuencia Absoluta", "Frecuencia Relativa")
TOTAL = c(sum(fa_direc_or),sum(fr_direc_or))
tabla_direc_or = rbind(tabla_direc_or,TOTAL)
# Diagrama de Pareto, cantidad de Estaciones de Origen de acuerda a su frecuencia absoluta,
# el Principio de Pareto que se visualiza es que la mayoria de las estaciones son poco utilizadas
# como estacion de origen.
title = "Estaciones de EcoBicis de CABA según la cantidad de veces\n de que fueron utilizadas como estación de origen."
pareto.chart(table(tabla_direc_or[order(-fa_direc_or)]),ylab = "Cantidad de Estaciones",xlab = "Número de concurrencias",main = title,ylab2 = "Porcentaje Acumulado")
